using System;
using System.Collections.Generic;
using System.Data.SqlClient; //generated by hovering over SqlConnection on line 2, potential fixes
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpToSql {
	class Program {

		static List<User> users = new List<User>();

		void Run() {
			User user = new User();
			user.Id = 8;
			user.Username = "a";
			user.Password = "Password";
			user.Firstname = "Lisa";
			user.Lastname = "Slutsky";
			user.Phone = "555-555-1212";
			user.Email = "ls@gmail.com";
			user.IsReviewer = true;
			user.IsAdmin = true;
			Update(user); //this is inserting the user in SQL
		}

		static void Main(string[] args) {
			(new Program()).Run();
		}

		void Update(User user) {
			string connStr = @"server=localhost\SQLEXPRESS;database=prssql;Trusted_connection=true";
			SqlConnection conn = new SqlConnection(connStr);
			conn.Open();
			if (conn.State != System.Data.ConnectionState.Open) {
				throw new ApplicationException("Connection did not open"); //ALWAYS include an exception here
			}
			string sql = " Update [user] "
				+ "Set Username = @Username, "
				+ " Password = @Password, "
				+ " Firstname = @Firstname, "
				+ " Lastname = @Lastname, "
				+ " Phone = @Phone, "
				+ " Email = @Email, "
				+ " IsReviewer = @IsReviewer, "
				+ " IsAdmin = @IsAdmin "
				+ " Where Id = @Id; ";
			SqlCommand cmd = new SqlCommand(sql, conn);
			//these are SQL parameters
			cmd.Parameters.Add(new SqlParameter("@Id", user.Id)); 
			cmd.Parameters.Add(new SqlParameter("@Username", user.Username)); //this is creating the Username parameter, and adding it to the list of parameters
			cmd.Parameters.Add(new SqlParameter("@Password", user.Password));
			cmd.Parameters.Add(new SqlParameter("@Firstname", user.Firstname));
			cmd.Parameters.Add(new SqlParameter("@Lastname", user.Lastname));
			cmd.Parameters.Add(new SqlParameter("@Phone", user.Phone));
			cmd.Parameters.Add(new SqlParameter("@Email", user.Email));
			cmd.Parameters.Add(new SqlParameter("@IsReviewer", user.IsReviewer));
			cmd.Parameters.Add(new SqlParameter("@IsAdmin", user.IsAdmin));

			int recsAffected = cmd.ExecuteNonQuery();
			if (recsAffected != 1) { //this tells us if the row didn't get updated
				System.Diagnostics.Debug.WriteLine("Record insert failed");
			}
			conn.Close();

		}


		void Insert(User user) {
				string connStr = @"server=localhost\SQLEXPRESS;database=prssql;Trusted_connection=true";
				SqlConnection conn = new SqlConnection(connStr);
				conn.Open();
				if (conn.State != System.Data.ConnectionState.Open) {
					throw new ApplicationException("Connection did not open"); //ALWAYS include an exception here
				}
				string sql = "insert into [user] (Username, Password, Firstname, Lastname, Phone, Email, IsReviewer, IsAdmin)" +  //the plus sign is concatenating the strings
				//PRO TIP: check your SQL statement in SQL Server Management Studio and make sure you're getting the correct  output. this is how we execute SQL in VS
				"values (@Username, @Password, @Firstname, @Lastname, @Phone, @Email, @IsReviewer, @IsAdmin)";
				SqlCommand cmd = new SqlCommand(sql, conn);
				//these are SQL parameters
				cmd.Parameters.Add(new SqlParameter("@Username", user.Username)); //this is creating the Username parameter, and adding it to the list of parameters
				cmd.Parameters.Add(new SqlParameter("@Password", user.Password));
				cmd.Parameters.Add(new SqlParameter("@Firstname", user.Firstname));
				cmd.Parameters.Add(new SqlParameter("@Lastname", user.Lastname));
				cmd.Parameters.Add(new SqlParameter("@Phone", user.Phone));
				cmd.Parameters.Add(new SqlParameter("@Email", user.Email));
				cmd.Parameters.Add(new SqlParameter("@IsReviewer", user.IsReviewer));
				cmd.Parameters.Add(new SqlParameter("@IsAdmin", user.IsAdmin));

			int recsAffected = cmd.ExecuteNonQuery();
				if(recsAffected != 1) { //this tells us if the row didn't get updated
				System.Diagnostics.Debug.WriteLine("Record insert failed");
			}
			conn.Close();
	
				}

				void Select() {


					string connStr = @"server=localhost\SQLEXPRESS;database=prssql;Trusted_connection=true";
					SqlConnection conn = new SqlConnection(connStr);
					conn.Open();
					if (conn.State != System.Data.ConnectionState.Open) {
						throw new ApplicationException("Connection did not open"); //ALWAYS include an exception here
					}
					string sql = "select * from [user]";  //PRO TIP: check your SQL statement in SQL Server Management Studio and make sure you're getting the correct  output. this is how we execute SQL in VS
					SqlCommand cmd = new SqlCommand(sql, conn);
					SqlDataReader reader = cmd.ExecuteReader();
					while (reader.Read()) {//this is processing all the rows of a column
						int id = reader.GetInt32(reader.GetOrdinal("Id")); // int id is how we're going to read the id column
						string username = reader.GetString(reader.GetOrdinal("Username")); // string username is how we're going to read the username column
																						   //this data only exists in VS when the program is running - we'll need to push this into a class and put id and username in it and store it in a collection
						string password = reader.GetString(reader.GetOrdinal("Password")); 
						string firstname = reader.GetString(reader.GetOrdinal("Firstname"));
						string lastname = reader.GetString(reader.GetOrdinal("Lastname")); //the string in GetOrdinal MUST match the column name in SQL EXACTLY
						string phone = reader.GetString(reader.GetOrdinal("Phone"));
						string email = reader.GetString(reader.GetOrdinal("Email"));
						bool isreviewer = reader.GetBoolean(reader.GetOrdinal("IsReviewer")); //this one is a boolean
						bool isadmin = reader.GetBoolean(reader.GetOrdinal("IsAdmin"));
						bool active = reader.GetBoolean(reader.GetOrdinal("Active"));

						User user = new User();
						user.Id = id;
						user.Username = username;
						user.Password = password;
						user.Firstname = firstname;
						user.Lastname = lastname;
						user.Phone = phone;
						user.IsReviewer = isreviewer;
						user.IsAdmin = isadmin;
						user.Active = active;

						System.Diagnostics.Debug.WriteLine($"{id}, {username}");  //this is saying print the id and username columns

						users.Add(user);
					}
				//System.Diagnostics.Debug.WriteLine("Connection Opened"); //This tells us if the connection is open
				conn.Close(); //ALWAYS close your connection when you're done
			}


			
			
		}
	}


